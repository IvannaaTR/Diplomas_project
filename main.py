# -*- coding: utf-8 -*-
import telebot
from info import Info
from menu import Menu
from telebot import types
from dataBase import DataBase
from canHelp import CreateHelpItem
from myRequests import myRequests
from allRequests import allRequests
from canHelp import check_name
from canHelp import check_categories
from canHelp import is_valid_phone_number
import re

bot = telebot.TeleBot("token")
info = Info()
menu= Menu()
db = DataBase()
createHelp = CreateHelpItem()
myRequests = myRequests()
allRequests=allRequests()

def get_info(message):
    result=info.find_info_message(message)
    if(len(result)==2):
        if(result[0]=="None"):
            bot.send_message(message.chat.id, "–ù–∞ –∂–∞–ª—å –º–µ–Ω—ñ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∂–æ–¥–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–æ —Ü—å–æ–º—É –∑–∞–ø–∏—Ç—Éü§î –û–¥–Ω–∞–∫, –Ω–µ –∑–∞—Å–º—É—á—É–π—Ç–µ—Å—å, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—Ç—å –∫–æ—Ä–∏—Å–Ω–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏, –∑–∞–¥–ª—è –ø–æ—à—É–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó", reply_markup = result[1])
        else:
            answers = result[0].split('#')
            answers.pop()
            for answer in answers:
                bot.send_message(message.chat.id, answer, parse_mode="HTML")
            bot.send_message(message.chat.id, "‚úÖ –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω—ñ—à–æ—ó –¥–æ–≤—ñ–¥–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º üëá", reply_markup = result[1])
            bot.send_message(message.chat.id, "–ë—É–¥—å—Ç–µ –æ–±–∞—á–Ω—ñ —Ç–∞ –æ–±–µ—Ä–µ–∂–Ω—ñ üòâ")
    else:
        answers = result.split('#')
        answers.pop()
        for answer in answers:
            bot.send_message(message.chat.id, answer, parse_mode="HTML")
   

def my_requests(message):
    result_string = myRequests.build_my_requsests_text(message.chat.id, 0)
    if(result_string != None):
        db.set_user(message.chat.id, {"my_requests_index": 0})
        bot.send_message(message.chat.id,f'{result_string}',reply_markup= myRequests.inline_markup__my_requests())
    else:
        bot.send_message(message.chat.id, text="–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫")
    

@bot.callback_query_handler(func=lambda callback: callback.data == "next_request") 
def next_step(callback):
    user = db.get_user(callback.message.chat.id)
    index = user["my_requests_index"]
    if(index!= len(user["requests"])-1):
        index = index + 1
    else:
        bot.send_message(callback.message.chat.id,'–í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ c–≤–æ—ó –∑–∞—è–≤–∫–∏ ‚úÖ')
        return
    db.set_user(callback.message.chat.id, {"my_requests_index": index})
    result_string = myRequests.build_my_requsests_text(callback.message.chat.id, index)
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id = callback.message.id, text=f'{result_string}',reply_markup= myRequests.inline_markup__my_requests() )
    
@bot.callback_query_handler(func=lambda callback: callback.data == "previous_request") 
def previous_step(callback):
    user = db.get_user(callback.message.chat.id)
    index = user["my_requests_index"]
    if(index!= 0):
        index = index - 1
    else:
        bot.send_message(callback.message.chat.id,'–í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ —Å–≤–æ—ó –∑–∞—è–≤–∫–∏ ‚úÖ')
        return
    db.set_user(callback.message.chat.id, {"my_requests_index": index})
    result_string = myRequests.build_my_requsests_text(callback.message.chat.id, index)
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id = callback.message.id, text=f'{result_string}',reply_markup= myRequests.inline_markup__my_requests() )

@bot.callback_query_handler(func=lambda callback: callback.data == "cancel_request") 
def cancel_request(callback):
    user = db.get_user(callback.message.chat.id)
    if(len(user["requests"])>1):
        item_index = user["my_requests_index"]
        db.users.update_one({"chat_id": callback.message.chat.id }, {'$unset': {f"requests.{item_index}": ""}})
        db.users.update_one({"chat_id": callback.message.chat.id }, {'$pull': {'requests': None}})
        db.set_user(callback.message.chat.id, {"my_requests_index": 0})
        result_string = myRequests.build_my_requsests_text(callback.message.chat.id, 0)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id = callback.message.id, text=f'{result_string}',reply_markup= myRequests.inline_markup__my_requests() )
    else:
        item_index = user["my_requests_index"]
        db.users.update_one({"chat_id": callback.message.chat.id }, {'$unset': {f"requests": 1}})
        db.set_user(callback.message.chat.id, {"location_city":False, "location_region":False, "location_district":False, "need_help":False })
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id = callback.message.id, text="–£ –≤–∞—Å –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –∂–æ–¥–Ω–æ—ó –∑–∞—è–≤–∫–∏!")


@bot.callback_query_handler(func=lambda callback: callback.data == "update_request") 
def update_request(callback):
    user = db.get_user(callback.message.chat.id)
    index = user["my_requests_index"]
    result_string = myRequests.build_my_requsests_text(callback.message.chat.id, index)
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id = callback.message.id, text=f'{result_string}', reply_markup= myRequests.inline_markup_update())
    
@bot.callback_query_handler(func=lambda callback: callback.data == "update_place") 
def update_place(callback):
    myRequests.update_place(bot,callback)
    
   
@bot.callback_query_handler(func=lambda callback: callback.data == "update_number") 
def update_phone(callback):
    myRequests.update_phone(bot,callback)
     
@bot.callback_query_handler(func=lambda callback: callback.data == "update_details") 
def update_details(callback):
    myRequests.update_details(bot,callback)
 
@bot.callback_query_handler(func=lambda callback: callback.data == "update_previous") 
def update_previous(callback):
    sent = bot.send_message(callback.message.chat.id, "–í–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—åüîô")
    user = db.get_user(callback.message.chat.id)
    index = user["my_requests_index"]
    result_string = myRequests.build_my_requsests_text(callback.message.chat.id, index)
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id = callback.message.id, text=f'{result_string}', reply_markup= myRequests.inline_markup__my_requests() )


def can_help(message):
    documents = allRequests.get_all_requests(message.chat.id)
    user = db.get_user(message.chat.id)
    index1 = 0
    index2 = 0
    result_string = allRequests.build_button_text(documents,index1,index2)
    bot.send_message(message.chat.id,f'{result_string}',reply_markup= allRequests.inline_markup_creation())
    requests = documents[index1].get('requests', [])
    db.set_user(message.chat.id, {"help_index1":0, "help_index2":0, "end_help": len(requests)-1,"filtering":[False,False,False,False]})

@bot.callback_query_handler(func=lambda callback: callback.data == "next") 
def next_step(callback):
    flag_found=True
    user = db.get_user(callback.message.chat.id)
    index1 = user["help_index1"]
    index2 = user["help_index2"]
    documents = allRequests.get_documents(user)[0]
    requests = documents[index1].get('requests', [])
    db.set_user(callback.message.chat.id, {"end_help": len(requests)-1})
    end_index = len(requests)-1
    if(index2 != end_index):  
        if(user["filtering"][3] != False):
            index2 = index2 + 1
            while(documents[index1]["requests"][index2].get("category") != user["filtering"][3]):
                if(index2 == end_index):
                    flag_found=False
                    break
                index2 = index2 + 1
            db.set_user(callback.message.chat.id, {"help_index2": index2})
        else: 
            index2 = index2 + 1
            db.set_user(callback.message.chat.id, {"help_index2": index2})   
    else:
        if index1 != len(documents) - 1:
            index1 = index1 + 1
            requests = documents[index1].get('requests', [])
            db.set_user(callback.message.chat.id, {"end_help": len(requests)-1})
            user = db.get_user(callback.message.chat.id)
            end_index = user["end_help"]
            if(user["filtering"][3] != False):
                index2 = 0
                while(documents[index1]["requests"][index2].get("category") != user["filtering"][3]):
                    if(index2 == end_index):
                        flag_found=False
                        break
                    index2 = index2 + 1
            else:
                index2 = 0
            db.set_user(callback.message.chat.id, {"help_index1": index1, "help_index2": index2})
        else:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id = callback.message.id, text=f'–í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ ‚úÖ', reply_markup=allRequests.inline_markup_creation())
            return
    if(flag_found == True):
        result_string  = allRequests.build_button_text(documents,index1,index2)
        try:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id = callback.message.id, text=f'{result_string}', reply_markup=allRequests.inline_markup_creation())
            print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ")
        except telebot.apihelper.ApiException as e:
            if "message is not modified" in str(e):
                print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω—é–≤–∞–ª–æ—Å—è")
        
    else:
        next_step(callback)

@bot.callback_query_handler(func=lambda callback: callback.data == "previous") 
def previous_step(callback):
    flag_found=True
    user = db.get_user(callback.message.chat.id)
    index1 = user["help_index1"]
    index2 = user["help_index2"]
    documents = allRequests.get_documents(user)[0]
    requests = documents[index1].get('requests', [])
    db.set_user(callback.message.chat.id, {"end_help": len(requests)-1})
    end_index = len(requests)-1
    if(index2 != 0):
        if(user["filtering"][3] != False):
            index2 = index2 - 1
            while(documents[index1]["requests"][index2].get("category") != user["filtering"][3]):
                if(index2 == 0):
                    flag_found=False
                    break
                index2 = index2 - 1
            db.set_user(callback.message.chat.id, {"help_index2": index2})
        else: 
            index2 = index2 - 1
            db.set_user(callback.message.chat.id, {"help_index2": index2}) 
    else:
        if index1!=0:
            index1 = index1 - 1
            requests = documents[index1].get('requests', [])
            db.set_user(callback.message.chat.id, {"end_help": len(requests)-1})
            user = db.get_user(callback.message.chat.id)
            end_index = user["end_help"]
            if(user["filtering"][3] != False):
                index2 = end_index
                while(documents[index1]["requests"][index2].get("category") != user["filtering"][3]):
                    if(index2 == end_index):
                        flag_found=False
                        break
                    index2 = index2 - 1
            else:
                index2 = end_index
                
            db.set_user(callback.message.chat.id, {"help_index1": index1})
            db.set_user(callback.message.chat.id, {"help_index2": index2})       
        else:
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id = callback.message.id, text=f'–í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ ‚úÖ', reply_markup=allRequests.inline_markup_creation())
            return
    if(flag_found == True):
        result_string  = allRequests.build_button_text(documents,index1,index2)
        try:
             bot.edit_message_text(chat_id=callback.message.chat.id, message_id = callback.message.id, text=f'{result_string}', reply_markup=allRequests.inline_markup_creation())
             print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ")
        except telebot.apihelper.ApiException as e:
            if "message is not modified" in str(e):
                print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω—é–≤–∞–ª–æ—Å—è")
    else:
        previous_step(callback)


def get_filter(getted_id,messaged_id,index):
    user = db.get_user(getted_id)
    documents = allRequests.get_documents(user)
    if(len(documents[0])>0):
        index1 = 0
        index2 = 0
        if(user["filtering"][3] != False):
            while(documents[0][index1]["requests"][index2].get("category") != user["filtering"][3]):
                index2 = index2+1
            db.set_user(getted_id, {"help_index2":index2})
        result_string = allRequests.build_button_text(documents[0],index1,index2)
        try:
            bot.edit_message_text(chat_id=getted_id,message_id = messaged_id,text=f'{result_string}',reply_markup= allRequests.inline_markup_creation())
            print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ")
        except telebot.apihelper.ApiException as e:
            if "message is not modified" in str(e):
                print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω—é–≤–∞–ª–æ—Å—è")
            else:
                print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e)
        
        requests = documents[0][index1].get('requests', [])
        db.set_user(getted_id, {"end_help": len(requests)-1})
        if(index!=-1):
            bot.send_message(getted_id, f'{documents[1]}Ô∏è')
    else:
        db.set_user(getted_id, {f'filtering.{index}': False})
        bot.send_message(getted_id, "–ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —Ü—å–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Öü§∑‚Äç‚ôÄÔ∏è")
    
@bot.callback_query_handler(func=lambda callback: callback.data == "filter_region") 
def filter_region(callback):
    sent = bot.send_message(callback.message.chat.id, f'–í–∫–∞–∂—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å:')
    bot.register_next_step_handler(sent, lambda msg: get_region(msg,callback.message.id))
    
    
def get_region(message,message_id):
    getted_message = message.text
    if(check_name(getted_message)==True):
        db.set_user(message.chat.id, {"help_index1":0, "help_index2":0, f'filtering.0': getted_message})
        get_filter(message.chat.id,message_id,0)
    else:
        sent = bot.reply_to(message, '–ù–∞ –∂–∞–ª—å –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫—É –æ–±–ª–∞—Å—Ç—å.–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –æ–±–ª–∞—Å—Ç—ñ —â–µ —Ä–∞–∑:')
        bot.register_next_step_handler(sent, lambda msg: get_region(msg,message_id))
 
@bot.callback_query_handler(func=lambda callback: callback.data == "filter_district") 
def filter_district(callback):
    sent = bot.send_message(callback.message.chat.id, f'–í–∫–∞–∂—ñ—Ç—å —Ä–∞–π–æ–Ω:')
    bot.register_next_step_handler(sent, lambda msg: get_district(msg,callback.message.id))
    
    
def get_district(message,message_id):
    getted_message = message.text
    db.set_user(message.chat.id, {"help_index1":0, "help_index2":0, f'filtering.1': getted_message})
    get_filter(message.chat.id,message_id,1)
    
@bot.callback_query_handler(func=lambda callback: callback.data == "filter_city") 
def filter_city(callback):
    sent = bot.send_message(callback.message.chat.id, f'–í–∫–∞–∂—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç:')
    bot.register_next_step_handler(sent, lambda msg: get_city(msg,callback.message.id))
    
    
def get_city(message,message_id):
    getted_message = message.text
    db.set_user(message.chat.id, {"help_index1":0, "help_index2":0, f'filtering.2': getted_message})
    get_filter(message.chat.id,message_id,2)
    

@bot.callback_query_handler(func=lambda callback: callback.data == "filter_category") 
def filter_category(callback):
    sent = bot.send_message(callback.message.chat.id, f'–í–∫–∞–∂—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: –ü—Ä–æ–¥—É–∫—Ç–∏, –û–¥—è–≥, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ü–∞–ª–∏–≤–æ, –ñ–∏—Ç–ª–æ, –Ü–Ω—à–µ')
    bot.register_next_step_handler(sent,lambda msg: get_category(msg,callback.message.id) )
    
    
def get_category(message,message_id):
    getted_message = message.text
    if(check_categories(getted_message)==True):
        db.set_user(message.chat.id, {"help_index1":0, "help_index2":0, f'filtering.3': getted_message})
        get_filter(message.chat.id,message_id,3)
    else:
        sent = bot.reply_to(message, '–ù–∞ –∂–∞–ª—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —â–µ —Ä–∞–∑:')
        bot.register_next_step_handler(sent, lambda msg: get_category(msg,message_id))

@bot.callback_query_handler(func=lambda callback: callback.data == "cancel_filter") 
def cancel_filter(callback):
    bot.send_message(callback.message.chat.id, f'–í—Å—ñ –æ–±—Ä–∞–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!')
    db.set_user(callback.message.chat.id, {"help_index1":0, "help_index2":0, "filtering.0": False, "filtering.1": False, "filtering.2": False, "filtering.3": False})
    get_filter(callback.message.chat.id,callback.message.id,-1)

@bot.callback_query_handler(func=lambda callback: callback.data == "respond")
def respond(callback):
    user = db.get_user(callback.message.chat.id)
    index1 = user["help_index1"]
    index2 = user["help_index2"]
    documents = allRequests.get_documents(user)[0]
    getted_id = documents[index1].get('chat_id')
    getted_number = documents[index1].get('phone_number')
    result_string  = allRequests.build_button_text(documents,index1,index2)
    if(user["phone_number"]!=False):
        sent = bot.send_message(callback.message.chat.id, f'–ó–±–µ—Ä–µ–∂–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user["phone_number"]}. –ß–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—è –í–∞—à—ñ –¥–∞–Ω—ñ?')
        bot.register_next_step_handler(sent, lambda msg: check_answer_phone(msg,getted_id,getted_number,result_string,user["phone_number"]))
    else:
        sent = bot.reply_to(message, '–í–∫–∞–∂—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
        bot.register_next_step_handler(sent, lambda msg: save_phone(msg,getted_id,getted_number,result_string))

def check_answer_phone(message,getted_id,getted_number,result_string,phone):
    if(message.text.lower()=="—Ç–∞–∫"):
        sent = bot.reply_to(message, '–í–∫–∞–∂—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
        bot.register_next_step_handler(sent,lambda msg: save_phone(msg,getted_id,getted_number,result_string))
    else:
        bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Å–æ–±–∏, —â–æ –ø–æ–¥–∞–ª–∞ –∑–∞—è–≤–∫—É: {getted_number}')
        bot.send_message(getted_id, f'–ù–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É: {result_string} –≤—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –∫–æ–Ω—Ç–∞–∫—Ç –∑ –Ω–æ–º–µ—Ä–æ–º {phone}')
def save_phone(message,getted_id,getted_number,result_string):
    message_to_save = message.text
    if(is_valid_phone_number(message_to_save)):
        db.set_user(message.chat.id, {"phone_number": message_to_save})
        bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Å–æ–±–∏, —â–æ –ø–æ–¥–∞–ª–∞ –∑–∞—è–≤–∫—É: {getted_number}')
        bot.send_message(getted_id, f'–ù–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É: {result_string} –≤—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –∫–æ–Ω—Ç–∞–∫—Ç –∑ –Ω–æ–º–µ—Ä–æ–º {message_to_save}')
    else:
        sent = bot.reply_to(message, '–ù–∞ –∂–∞–ª—å –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —â–µ —Ä–∞–∑:')
        bot.register_next_step_handler(sent, lambda msg: save_phone(msg,getted_id,getted_number,result_string))



#–û–ì–û–õ–û–®–ï–ù–ù–Ø
def save_advertisement_region(message):
    sent = bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –≤ —è–∫—ñ–π –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑ –±–∞—á–∏–ª–∏ –ª—é–¥–∏–Ω—É:")
    bot.register_next_step_handler(sent, save_advertisement_district)

def save_advertisement_district(message):
    message_to_save = message.text
    if(check_name(message_to_save)==True):
        index = len(db.get_announcements(message.chat.id))
        db.create_announcement(message.chat.id, index)
        db.set_announcement(message.chat.id,index,{"location_region":message_to_save})
        sent = bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å —Ä–∞–π–æ–Ω –≤ —è–∫–æ–º—É –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑ –±–∞—á–∏–ª–∏ –ª—é–¥–∏–Ω—É:")
        bot.register_next_step_handler(sent, save_advertisement_city)
    else:
        sent = bot.reply_to(message, '–ù–∞ –∂–∞–ª—å –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫—É –æ–±–ª–∞—Å—Ç—å.–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –æ–±–ª–∞—Å—Ç—ñ —â–µ —Ä–∞–∑:')
        bot.register_next_step_handler(sent, save_advertisement_district)
    
def save_advertisement_city(message):
    message_to_save = message.text
    index = len(db.get_announcements(message.chat.id))-1
    db.set_announcement(message.chat.id,index,{"location_district":message_to_save})
    sent = bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –≤ —è–∫–æ–º—É –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑ –±–∞—á–∏–ª–∏ –ª—é–¥–∏–Ω—É:")
    bot.register_next_step_handler(sent, save_advertisement_full_name)
    
def save_advertisement_full_name(message):
    message_to_save = message.text
    index = len(db.get_announcements(message.chat.id))-1
    db.set_announcement(message.chat.id,index,{"location_city":message_to_save})
    sent = bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º*—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ:")
    bot.register_next_step_handler(sent, save_advertisement_details)
    
def save_advertisement_details(message):
    message_to_save = message.text
    index = len(db.get_announcements(message.chat.id))-1
    db.set_announcement(message.chat.id,index,{"full_name":message_to_save})
    sent = bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ, –¥–∞—Ç—É –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è, —É–º–æ–≤–∏, —Ç–æ—â–æ:")
    bot.register_next_step_handler(sent, save_advertisement_photo)

def save_advertisement_photo(message):
    message_to_save = message.text
    index = len(db.get_announcements(message.chat.id))-1
    db.set_announcement(message.chat.id,index,{"details":message_to_save})
    sent = bot.send_message(message.chat.id, "–î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ç–æ")
    bot.register_next_step_handler(sent, save_advertisement_end)
    
def save_advertisement_end(message):
    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        index = len(db.get_announcements(message.chat.id))-1
        downloaded_file = bot.download_file(file_path)
        db.set_announcement(message.chat.id,index,{"file_id":file_id, "file_path":file_path, "photo":downloaded_file})
        bot.reply_to(message, "–§–æ—Ç–æ –±—É–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        user = db.get_user(message.chat.id)
        phone=user["phone_number"]
        if(phone==False):
            sent = bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
            bot.register_next_step_handler(sent, save_advertisement_phone)
        else:
             sent = bot.send_message(message.chat.id, f'–ß–∏ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—å –≤–∞—à—ñ –¥–∞–Ω—ñ? –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}:')
             bot.register_next_step_handler(sent, check_phone)
    else:
        sent = bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ.")
        bot.register_next_step_handler(sent, save_advertisement_end)
def save_advertisement_phone(message):
     message_to_save = message.text
     if(is_valid_phone_number(message_to_save)):
        db.set_user(message.chat.id, {"phone_number": message_to_save})
        bot.send_message(message.chat.id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ‚úÖ")
     else:
          sent = bot.reply_to(message, '–ù–∞ –∂–∞–ª—å –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —â–µ —Ä–∞–∑:')
          bot.register_next_step_handler(sent, save_advertisement_phone)
def check_phone(message):
     if(message.text.lower()=="—Ç–∞–∫"):
          sent = bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
          bot.register_next_step_handler(sent, save_advertisement_phone)
     else:
         bot.send_message(message.chat.id, "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ‚úÖ")



def get_all_announcement_requests():    
    return list(db.announcements.find())

def get_announcement_documents(user):
    filter = {}
    if(user["announcement_filtering"][0] != False):
        filter['location_region'] = user["announcement_filtering"][0]
    if(user["announcement_filtering"][1] != False):
        filter['location_district'] = user["announcement_filtering"][1]
    if(user["announcement_filtering"][2] != False):
        filter['location_city'] = user["announcement_filtering"][2]
    if(user["announcement_filtering"][3] != False):
        regex = re.compile('^' + user["announcement_filtering"][3] + '[–∞-—è–ê-–Ø–Ñ—î–á—ó–Ü—ñ“ê“ë]+', re.IGNORECASE | re.UNICODE)
        filter['full_name'] = {'$regex': regex}
    if(user["announcement_filtering"][0] == False and user["announcement_filtering"][1] == False and user["announcement_filtering"][2] == False and user["announcement_filtering"][3] == False):
        filter = {}

    return list(db.announcements.find(filter))

def build_announcement_text(documents, index):
    result_string=""
    document = documents[index]
    announcement_region = document.get('location_region')
    announcement_district = document.get('location_district')
    announcement_city = document.get('location_city')
    announcement_full_name = document.get('full_name')
    announcement_details = document.get('details')
    
    result_string += f"–û–±–ª–∞—Å—Ç—å: {announcement_region}\n"
    result_string += f"–†–∞–π–æ–Ω: {announcement_district}\n"
    result_string += f"–ú—ñ—Å—Ç–æ: {announcement_city}\n"
    result_string += f"–ü–Ü–ë: {announcement_full_name}\n"
    result_string += f"–î–µ—Ç–∞–ª—ñ: {announcement_details}\n"
    result_string += "---\n"
    return result_string
    
def announcement_markup_creation():
    kb = types.InlineKeyboardMarkup(row_width=2)
    btn_respond = types.InlineKeyboardButton(text= '–í—ñ–¥–≥—É–∫–Ω—É—Ç–∏—Å—å', callback_data='advertisement_respond')
    btn_next = types.InlineKeyboardButton(text='–î–∞–ª—ñ', callback_data='advertisement_next')
    btn_previous = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='advertisement_previous')
    btn_filter_region =  types.InlineKeyboardButton(text='–§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞ –æ–±–ª–∞—Å—Ç—é', callback_data='advertisement_filter_region')
    btn_filter_district =  types.InlineKeyboardButton(text='–§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞ —Ä–∞–π–æ–Ω–æ–º', callback_data='advertisement_filter_district')
    btn_filter_city =  types.InlineKeyboardButton(text='–§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞ –º—ñ—Å—Ç–æ–º', callback_data='advertisement_filter_city')
    btn_filter_full_name =  types.InlineKeyboardButton(text='–§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º', callback_data='advertisement_filter_full_name')
    btn_cancel_filter = types.InlineKeyboardButton(text='–°–∫–∞—Å—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏', callback_data='advertisement_cancel_filter')
    kb.row(btn_previous,btn_next)
    kb.row(btn_respond)
    kb.row(btn_filter_region,btn_filter_district)
    kb.row(btn_filter_city,btn_filter_full_name)
    kb.row(btn_cancel_filter)
    return kb
    

def announcement_view(message):
    documents = get_all_announcement_requests()
    user = db.get_user(message.chat.id)
    index = 0
    db.set_user(message.chat.id, {"announcement_index": 0, "announcement_filtering":[False,False,False,False]})
    result_string = build_announcement_text(documents,index)
    photo = documents[index].get('photo')
    bot.send_photo(message.chat.id, photo, caption=f'{result_string}', reply_markup= announcement_markup_creation())
    
@bot.callback_query_handler(func=lambda callback: callback.data == "advertisement_next") 
def next_step_adv(callback):
    user = db.get_user(callback.message.chat.id)
    index = user["announcement_index"]
    documents = get_announcement_documents(user)
    
    if(index!= len(documents)-1):
        index = index + 1
        db.set_user(callback.message.chat.id, {"announcement_index": index})
        photo = documents[index].get('photo')
        result_string = build_announcement_text(documents, index)
        updated_media = types.InputMediaPhoto(media=photo, caption=f'{result_string}')
        bot.edit_message_media(media= updated_media, chat_id=callback.message.chat.id, message_id = callback.message.id,reply_markup= announcement_markup_creation() )
    else:
        bot.send_message(callback.message.chat.id,'–í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ c–≤–æ—ó –∑–∞—è–≤–∫–∏ ‚úÖ')
        return
    
    
@bot.callback_query_handler(func=lambda callback: callback.data == "advertisement_previous") 
def previous_step_adv(callback):
    user = db.get_user(callback.message.chat.id)
    index = user["announcement_index"]
    documents = get_announcement_documents(user)
    
    if(index!= 0):
        index = index - 1
    else:
        bot.send_message(callback.message.chat.id,'–í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ c–≤–æ—ó –∑–∞—è–≤–∫–∏ ‚úÖ')
        return
    db.set_user(callback.message.chat.id, {"announcement_index": index})
    photo = documents[index].get('photo')
    result_string = build_announcement_text(documents, index)
    updated_media = types.InputMediaPhoto(media=photo, caption=f'{result_string}')
    bot.edit_message_media(media= updated_media, chat_id=callback.message.chat.id, message_id = callback.message.id,reply_markup= announcement_markup_creation() )
    
@bot.callback_query_handler(func=lambda callback: callback.data == "advertisement_respond")
def respond(callback):
    user = db.get_user(callback.message.chat.id)
    index = user["announcement_index"]
    documents = get_announcement_documents(user)
    getted_id = documents[index].get('chat_id')
    getted_another_user = db.get_user(getted_id)
    getted_number = getted_another_user["phone_number"]
    sent = bot.send_message(callback.message.chat.id, '–í–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ, —è–∫—ñ –≤–∞–º –≤—ñ–¥–æ–º–æ —Å—Ç–æ—Å–æ–≤–Ω–æ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ü—ñ—î—ó –ª—é–¥–∏–Ω–∏:')
    bot.register_next_step_handler(sent, lambda msg: send_details(msg,getted_id,getted_number))
    
def send_details(message,getted_id,getted_number):
    message_to_save = message.text
    user = db.get_user(message.chat.id)
    index = user["announcement_index"]
    documents = get_announcement_documents(user)
    photo = documents[index].get('photo')
    result_string = build_announcement_text(documents, index)
    bot.send_message(message.chat.id, f'–î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!')
    if(user["phone_number"]!=False):
        sent = bot.send_message(message.chat.id, f'–ó–±–µ—Ä–µ–∂–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user["phone_number"]}. –ß–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—è –í–∞—à—ñ –¥–∞–Ω—ñ?')
        bot.register_next_step_handler(sent, lambda msg: check_answer_advertisement_phone(msg,getted_id,getted_number,result_string,photo,user["phone_number"],message_to_save))
    else:
        sent = bot.send_message(message.chat.id, '–í–∫–∞–∂—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
        bot.register_next_step_handler(sent, lambda msg: save_phone(msg,getted_id,getted_number,result_string,photo))
   
def check_answer_advertisement_phone(message,getted_id,getted_number,result_string,photo,phone,details):
    if(message.text.lower()=="—Ç–∞–∫"):
        sent = bot.reply_to(message, '–í–∫–∞–∂—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:')
        bot.register_next_step_handler(sent,lambda msg: save_phone(msg,getted_id,getted_number,result_string,photo))
    else:
        bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Å–æ–±–∏, —â–æ –ø–æ–¥–∞–ª–∞ –∑–∞—è–≤–∫—É: {getted_number}')
        bot.send_photo(getted_id, photo, caption=f'–ù–∞ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {result_string} –≤—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –∫–æ–Ω—Ç–∞–∫—Ç –∑ –Ω–æ–º–µ—Ä–æ–º {phone} —ñ –∑–∞–ª–∏—à–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {details}')

def save_phone(message,getted_id,getted_number,result_string,photo):
    message_to_save = message.text
    if(is_valid_phone_number(message_to_save)):
        db.set_user(message.chat.id, {"phone_number": message_to_save})
        bot.send_message(message.chat.id, f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Å–æ–±–∏, —â–æ –ø–æ–¥–∞–ª–∞ –∑–∞—è–≤–∫—É: {getted_number}')
        bot.send_photo(getted_id, photo, caption=f'–ù–∞ –≤–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {result_string} –≤—ñ–¥–≥—É–∫–Ω—É–≤—Å—è –∫–æ–Ω—Ç–∞–∫—Ç –∑ –Ω–æ–º–µ—Ä–æ–º {phone} —ñ –∑–∞–ª–∏—à–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {details}')
    else:
        sent = bot.reply_to(message, '–ù–∞ –∂–∞–ª—å –≤–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä –Ω–µ —î –≤–∞–ª—ñ–¥–Ω–∏–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —â–µ —Ä–∞–∑:')
        bot.register_next_step_handler(sent, lambda msg: save_phone(msg,getted_id,getted_number,result_string,photo))



def get_announcement_filter(getted_id):
    db.set_user(getted_id, {'announcement_index': 0})
    user = db.get_user(getted_id)
    index = 0
    documents = get_announcement_documents(user)
    result_string = build_announcement_text(documents,index)
    photo = documents[index].get('photo')
    bot.send_photo(getted_id, photo, caption=f'{result_string}', reply_markup= announcement_markup_creation())

    
@bot.callback_query_handler(func=lambda callback: callback.data == "advertisement_filter_region") 
def advertisement_filter_region(callback):
    bot.delete_message(chat_id=callback.message.chat.id,message_id=callback.message.message_id)
    sent = bot.send_message(callback.message.chat.id, f'–í–∫–∞–∂—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å')
    bot.register_next_step_handler(sent, advertisement_get_region)
    
    
def advertisement_get_region(message):
    getted_message = message.text
    db.set_user(message.chat.id, {"announcement_index":0, f'announcement_filtering.0': getted_message})
    get_announcement_filter(message.chat.id)
 
@bot.callback_query_handler(func=lambda callback: callback.data == "advertisement_filter_district") 
def advertisement_filter_district(callback):
    bot.delete_message(chat_id=callback.message.chat.id,message_id=callback.message.message_id)
    sent = bot.send_message(callback.message.chat.id, f'–í–∫–∞–∂—ñ—Ç—å —Ä–∞–π–æ–Ω')
    bot.register_next_step_handler(sent, advertisement_get_district)
    
    
def advertisement_get_district(message):
    getted_message = message.text
    db.set_user(message.chat.id, {"announcement_index":0, f'announcement_filtering.1': getted_message})
    get_announcement_filter(message.chat.id)
    
@bot.callback_query_handler(func=lambda callback: callback.data == "advertisement_filter_city") 
def advertisement_filter_city(callback):
    bot.delete_message(chat_id=callback.message.chat.id,message_id=callback.message.message_id)
    sent = bot.send_message(callback.message.chat.id, f'–í–∫–∞–∂—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç')
    bot.register_next_step_handler(sent, advertisement_get_city)
    
    
def advertisement_get_city(message):
    getted_message = message.text
    db.set_user(message.chat.id, {"announcement_index":0, f'announcement_filtering.2': getted_message})
    get_announcement_filter(message.chat.id)
    

@bot.callback_query_handler(func=lambda callback: callback.data == "advertisement_filter_full_name") 
def advertisement_filter_category(callback):
    bot.delete_message(chat_id=callback.message.chat.id,message_id=callback.message.message_id)
    sent = bot.send_message(callback.message.chat.id, f'–í–∫–∞–∂—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ')
    bot.register_next_step_handler(sent, advertisement_get__full_name)
    
    
def advertisement_get__full_name(message):
    getted_message = message.text
    db.set_user(message.chat.id, {"announcement_index":0, f'announcement_filtering.3': getted_message})
    get_announcement_filter(message.chat.id)

@bot.callback_query_handler(func=lambda callback: callback.data == "advertisement_cancel_filter") 
def advertisement_cancel_filter(callback):
    bot.delete_message(chat_id=callback.message.chat.id,message_id=callback.message.message_id)
    bot.send_message(chat_id=callback.message.chat.id, text="–í—Å—ñ –æ–±—Ä–∞–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    db.set_user(callback.message.chat.id, {"announcement_index":0,"announcement_filtering.0": False, "announcement_filtering.1": False, "announcement_filtering.2": False, "announcement_filtering.3": False})
    get_announcement_filter(callback.message.chat.id)

def inline_markup__my_advertisement():
    kb = types.InlineKeyboardMarkup(row_width=2)
    btn_next = types.InlineKeyboardButton(text='–î–∞–ª—ñ', callback_data='next_advertisement_request')
    btn_previous = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='previous_advertisement_request')
    btn_update =  types.InlineKeyboardButton(text='–†–µ–¥–∞–≥—É–≤–∞—Ç–∏', callback_data='update_advertisement_request')
    btn_cancel =  types.InlineKeyboardButton(text='–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='cancel_advertisement_request')
    kb.row(btn_previous,btn_next)
    kb.row(btn_update,btn_cancel)
    return kb

def build_my_advertisement_requsests_text(getted_id, my_announcement_requests_index):
    result_string=""
    announcements = db.get_announcements(getted_id)
    user = db.get_user(getted_id)
    if(len(announcements)!=0):
        document = announcements[my_announcement_requests_index]
        announcement_region = document.get('location_region')
        announcement_district = document.get('location_district')
        announcement_city = document.get('location_city')
        announcement_full_name = document.get('full_name')
        announcement_details = document.get('details')
        user_phone = user["phone_number"]
        
        result_string += f"–û–±–ª–∞—Å—Ç—å: {announcement_region}\n"
        result_string += f"–†–∞–π–æ–Ω: {announcement_district}\n"
        result_string += f"–ú—ñ—Å—Ç–æ: {announcement_city}\n"
        result_string += f"–ü–Ü–ë: {announcement_full_name}\n"
        result_string += f"–î–µ—Ç–∞–ª—ñ: {announcement_details}\n"
        result_string += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {user_phone}\n"
        result_string += "---\n"
        return result_string


def my_advertisement_requests(message):
    result_string = build_my_advertisement_requsests_text(message.chat.id, 0)
    if(result_string != None):
        documents=db.get_announcements(message.chat.id)
        photo = documents[0].get('photo')
        bot.send_photo(message.chat.id, photo, caption=f'{result_string}', reply_markup= inline_markup__my_advertisement())
        db.set_user(message.chat.id, {"my_announcement_requests_index":0})
    else:
        bot.send_message(message.chat.id, text="–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞—è–≤–æ–∫")
    

@bot.callback_query_handler(func=lambda callback: callback.data == "next_advertisement_request") 
def next_step_adv_req(callback):
    user = db.get_user(callback.message.chat.id)
    documents=db.get_announcements(callback.message.chat.id)
    index = user["my_announcement_requests_index"]
    if(index!= len(documents)-1):
        index = index + 1
    else:
        bot.send_message(callback.message.chat.id,'–í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ c–≤–æ—ó –∑–∞—è–≤–∫–∏ !')
        return
    db.set_user(callback.message.chat.id, {"my_announcement_requests_index": index})
    #result_string = build_my_advertisement_requsests_text(callback.message.chat.id, index)
    photo = documents[index].get('photo')
    result_string = build_my_advertisement_requsests_text(callback.message.chat.id, index)
    updated_media = types.InputMediaPhoto(media=photo, caption=f'{result_string}')
    bot.edit_message_media(media= updated_media, chat_id=callback.message.chat.id, message_id = callback.message.id,reply_markup= inline_markup__my_advertisement() )
    
@bot.callback_query_handler(func=lambda callback: callback.data == "previous_advertisement_request") 
def previous_step_adv_req(callback):
    user = db.get_user(callback.message.chat.id)
    documents=db.get_announcements(callback.message.chat.id)
    index = user["my_announcement_requests_index"]
    if(index!= 0):
        index = index - 1
    else:
        bot.send_message(callback.message.chat.id,'–í–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É–ª–∏ –≤—Å—ñ c–≤–æ—ó –∑–∞—è–≤–∫–∏ ‚úÖ')
        return
    db.set_user(callback.message.chat.id, {"my_announcement_requests_index": index})
    #result_string = build_my_advertisement_requsests_text(callback.message.chat.id, index)
    photo = documents[index].get('photo')
    result_string = build_my_advertisement_requsests_text(callback.message.chat.id, index)
    updated_media = types.InputMediaPhoto(media=photo, caption=f'{result_string}')
    bot.edit_message_media(media= updated_media, chat_id=callback.message.chat.id, message_id = callback.message.id,reply_markup= inline_markup__my_advertisement() )

@bot.callback_query_handler(func=lambda callback: callback.data == "cancel_advertisement_request") 
def cancel_advertisement_request(callback):
    user = db.get_user(callback.message.chat.id)
    documents=db.get_announcements(callback.message.chat.id)
    index = user["my_announcement_requests_index"]
    if index >= 0 and index < len(documents):
        document = documents[index]
        document_id = document['_id']
        db.announcements.delete_one({'_id': document_id})
               
        documents = db.announcements.find({'chat_id': callback.message.chat.id}).sort('index_announcement', 1)
        if(len(list(documents))!=0):
            for i, document in enumerate(documents):
                db.announcements.update_one({'_id': document['_id']}, {'$set': {'index_announcement': i}})
            db.set_user(callback.message.chat.id, {"my_announcement_requests_index": 0}) 
            user = db.get_user(callback.message.chat.id)
            index = user["my_announcement_requests_index"]
            documents=db.get_announcements(callback.message.chat.id)
            #result_string = build_my_requsests_text(callback.message.chat.id, index)
            photo = documents[index].get('photo')
            result_string = build_my_advertisement_requsests_text(callback.message.chat.id, index)
            updated_media = types.InputMediaPhoto(media=photo, caption=f'{result_string}')
            bot.edit_message_media(media= updated_media, chat_id=callback.message.chat.id, message_id = callback.message.id,reply_markup= inline_markup__my_advertisement() )
        else:
            bot.delete_message(chat_id=callback.message.chat.id,message_id=callback.message.message_id)
            bot.send_message(chat_id=callback.message.chat.id, text="–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–≥–æ–ª–æ—à–µ–Ω—å")
        return True
    else:
        return False
    
@bot.callback_query_handler(func=lambda callback: callback.data == "update_advertisement_request") 
def update_request(callback):
    kb = types.InlineKeyboardMarkup(row_width=1)
    btn_place = types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ü–µ ', callback_data='update_advertisement_place')
    btn_number = types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', callback_data='update_advertisement_number')
    btn_full_name =  types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ –ü–Ü–ë', callback_data='update_advertisement_full_name')
    btn_details =  types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ', callback_data='update_advertisement_details')
    btn_photo =  types.InlineKeyboardButton(text='–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ', callback_data='update_advertisement_photo')
    btn_previous =  types.InlineKeyboardButton(text='–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥', callback_data='update_advertisement_previous')
    kb.add(btn_place,btn_number,btn_full_name,btn_photo, btn_details,btn_previous)
    
    user = db.get_user(callback.message.chat.id)
    index = user["my_announcement_requests_index"]
    documents=db.get_announcements(callback.message.chat.id)
    photo = documents[index].get('photo')
    result_string = build_my_advertisement_requsests_text(callback.message.chat.id, index)
    updated_media = types.InputMediaPhoto(media=photo, caption=f'{result_string}')
    bot.edit_message_media(media= updated_media, chat_id=callback.message.chat.id, message_id = callback.message.id,reply_markup= kb )
    
@bot.callback_query_handler(func=lambda callback: callback.data == "update_advertisement_place") 
def update_advertisement_place(callback):
   sent = bot.send_message(callback.message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –í–∞—à—É –æ–±–ª–∞—Å—Ç—å:")
   bot.register_next_step_handler(sent, changed_advertisement_region)

def changed_advertisement_region(message):
    message_to_save = message.text
    user = db.get_user(message.chat.id)
    index = user["my_announcement_requests_index"]
    db.set_announcement(message.chat.id,index,{"location_region":message_to_save})
    sent = bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –í–∞—à —Ä–∞–π–æ–Ω:")
    bot.register_next_step_handler(sent, changed_advertisement_district)

def changed_advertisement_district(message):
    message_to_save = message.text
    user = db.get_user(message.chat.id)
    index = user["my_announcement_requests_index"]
    db.set_announcement(message.chat.id,index,{"location_district":message_to_save})
    sent = bot.send_message(message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –í–∞—à –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç:")
    bot.register_next_step_handler(sent, changed_advertisement_city)
    
def changed_advertisement_city(message):
    message_to_save = message.text
    user = db.get_user(message.chat.id)
    index = user["my_announcement_requests_index"]
    db.set_announcement(message.chat.id,index,{"location_city":message_to_save})
    bot.send_message(message.chat.id, "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ‚úÖ")
    
    
   
@bot.callback_query_handler(func=lambda callback: callback.data == "update_advertisement_number") 
def update_advertisement_phone(callback):
    sent = bot.send_message(callback.message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    bot.register_next_step_handler(sent, changed_advertisement_phone)
    
def changed_advertisement_phone(message):
    message_to_save = message.text
    db.set_user(message.chat.id, {"phone_number": message_to_save})
    bot.send_message(message.chat.id, "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ‚úÖ")
    
    
@bot.callback_query_handler(func=lambda callback: callback.data == "update_advertisement_details") 
def update_advertisement_details(callback):
    sent = bot.send_message(callback.message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ:")
    bot.register_next_step_handler(sent, changed_advertisement_details)
    
def changed_advertisement_details(message):
    message_to_save = message.text
    user = db.get_user(message.chat.id)
    index = user["my_announcement_requests_index"]
    db.set_announcement(message.chat.id,index,{"details":message_to_save})
    bot.send_message(message.chat.id, "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ‚úÖ")
    
    
@bot.callback_query_handler(func=lambda callback: callback.data == "update_advertisement_full_name") 
def update_advertisement_details(callback):
    sent = bot.send_message(callback.message.chat.id, "–í–∫–∞–∂—ñ—Ç—å –ü–Ü–ë:")
    bot.register_next_step_handler(sent, changed_advertisement_details)
    
def changed_advertisement_details(message):
    message_to_save = message.text
    user = db.get_user(message.chat.id)
    index = user["my_announcement_requests_index"]
    db.set_announcement(message.chat.id,index,{"full_name":message_to_save})
    bot.send_message(message.chat.id, "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ‚úÖ")
    
@bot.callback_query_handler(func=lambda callback: callback.data == "update_advertisement_photo") 
def update_advertisement_photo(callback):
    sent = bot.send_message(callback.message.chat.id, "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ:")
    bot.register_next_step_handler(sent, changed_advertisement_photo)
    
def changed_advertisement_photo(message):
    if message.content_type == 'photo':  
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path
        user = db.get_user(message.chat.id)
        index = user["my_announcement_requests_index"]
        downloaded_file = bot.download_file(file_path)
        db.set_announcement(message.chat.id,index,{"file_id":file_id, "file_path":file_path, "photo":downloaded_file})
        bot.reply_to(message, "–§–æ—Ç–æ –±—É–ª–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ‚úÖ!")
        user = db.get_user(message.chat.id)
    else:
        sent = bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ.")
        bot.register_next_step_handler(sent, changed_advertisement_photo)
    

@bot.callback_query_handler(func=lambda callback: callback.data == "update_advertisement_previous") 
def update_advertisement_previous(callback):
    bot.send_message(callback.message.chat.id, "–í–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—åüîô")
    user = db.get_user(callback.message.chat.id)
    index = user["my_announcement_requests_index"]
    documents=db.get_announcements(callback.message.chat.id)
    photo = documents[index].get('photo')
    result_string = build_my_advertisement_requsests_text(callback.message.chat.id, index)
    updated_media = types.InputMediaPhoto(media=photo, caption=f'{result_string}')
    bot.edit_message_media(media= updated_media, chat_id=callback.message.chat.id, message_id = callback.message.id,reply_markup= inline_markup__my_advertisement())
    



@bot.message_handler(commands=['start'])
def start_message(message):
    user_name = message.from_user.first_name
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤—ñ—Ç, {user_name} üëã –Ø –ú–∞–≤–∫–∞, —Ç–≤–æ—è –ø–æ–º—ñ—á–Ω–∏—Ü—è –ø—ñ–¥ —á–∞—Å –≤—ñ–π–Ω–∏')
    bot.send_message(message.chat.id,'–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?',reply_markup = menu.main_menu())
    user = db.get_user(message.chat.id)
    
@bot.message_handler(content_types='text')
def message_reply(message):
    if message.text=="–ü–µ—Ä—à–∞ –º–µ–¥–∏—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞":
        bot.send_message(message.chat.id,'–í–∫–∞–∂—ñ—Ç—å —Ç–æ—á–Ω—ñ—à–µ, —è–∫—É —Å–∞–º–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –í–∏ —à—É–∫–∞—î—Ç–µ üîú',reply_markup= menu.medical_menu())
    elif message.text=="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        bot.send_message(message.chat.id,'–í–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å üîô',reply_markup= menu.main_menu())
    elif message.text=="–ë–µ–∑–ø–µ–∫–∞":
        bot.send_message(message.chat.id,'–í–∫–∞–∂—ñ—Ç—å —Ç–æ—á–Ω—ñ—à–µ, —è–∫—É —Å–∞–º–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –í–∏ —à—É–∫–∞—î—Ç–µ üîú',reply_markup= menu.safe_menu())
    elif message.text=="–î–æ–ø–æ–º–æ–≥–∞":
        bot.send_message(message.chat.id,'–í–∫–∞–∂—ñ—Ç—å —Ç–æ—á–Ω—ñ—à–µ, —è–∫—É —Å–∞–º–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –í–∏ —à—É–∫–∞—î—Ç–µ üîú',reply_markup= menu.help_menu())
    elif message.text=="–ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏":
         can_help(message)
    elif message.text=="–ü–æ—Ç—Ä–µ–±—É—é –¥–æ–ø–æ–º–æ–≥–∏":
         createHelp.help_item(bot, message)
    elif message.text=="–ú–æ—ó –∑–∞—è–≤–∫–∏":
         my_requests(message)
    elif message.text=="–û–≥–æ–ª–æ—à–µ–Ω–Ω—è":
        bot.send_message(message.chat.id,'–í–∫–∞–∂—ñ—Ç—å —Ç–æ—á–Ω—ñ—à–µ, —è–∫—É —Å–∞–º–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –í–∏ —à—É–∫–∞—î—Ç–µ üîú',reply_markup=menu.advertisement_menu())
    elif message.text=="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è":  
         announcement_view(message)
    elif message.text=="–î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è":   
         save_advertisement_region(message)
    elif message.text=="–ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è":   
         my_advertisement_requests(message)
    elif message.text=="–ö–∞—Ä—Ç–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥":
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="–ö–∞—Ä—Ç–∞ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥", url='https://war.ukrzen.in.ua/alerts/')
        markup.add(button)
        bot.send_message(message.chat.id, "–ë—É–¥—å—Ç–µ –æ–±–∞—á–Ω—ñ —Ç–∞ –æ–±–µ—Ä–µ–∂–Ω—ñ üòâ"+ '\n'+ "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º üëá", reply_markup = markup)
    elif message.text=="–ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è":
        res_text="–¢—É—Ç –í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —ñ –Ω–∞–≤—ñ—Ç—å –±—ñ–ª—å—à–µ üëá"
        markup =  menu.useful_links()
        bot.send_message(message.chat.id, res_text, reply_markup = markup)
    elif message.text=="–ü—Ä–æ –±–æ—Ç–∞":
        information = "–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –ø—ñ–¥ —á–∞—Å –≤—ñ–π–Ω–∏.\n" \
              "–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ —Ä–æ–∑–¥—ñ–ª—ñ–≤, –∑–∞–ª–∏—à–∞—Ç–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–æ –¥–æ–ø–æ–º–æ–≥—É —á–∏ –ø–æ—à—É–∫ –∑–Ω–∏–∫–ª–∏—Ö –ª—é–¥–µ–π, –∞ —Ç–∞–∫–æ–∂ –æ–±–º—ñ–Ω—è—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∑ —Ç–∏–º–∏, –∫–æ–º—É –º–∞—î—Ç–µ –∑–º–æ–≥—É –¥–æ–ø–æ–º–æ–≥—Ç–∏.\n" \
              "–î–ª—è –æ–±–º—ñ–Ω—É –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ —Å–ª—ñ–¥ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –æ–ø—Ü—ñ—î—é –í—ñ–¥–≥—É–∫–Ω—É—Ç–∏—Å—è, –Ω–µ –±—É–¥—å–º–æ –±–∞–π–¥—É–∂–∏–º–∏!\n" \
              "–í–∞–∂–ª–∏–≤–æ‚ùóÔ∏è –ù–µ –≤–∫–∞–∑—É–π—Ç–µ —ñ –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–µ–±–µ, —Ç–∞–∫–æ—ó —è–∫ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ñ –¥–∞–Ω—ñ, –¥–∞–Ω—ñ –∫–∞—Ä—Ç–æ–∫, —Ç–æ—á–Ω—É –∞–¥—Ä–µ—Å—É —Ç–æ—â–æ!\n" \
              "–ë–æ—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î –∑–∞–≤–¥—è–∫–∏ –Ω–µ–±–∞–π–¥—É–∂–∏–º –ª—é–¥—è–º, –æ–¥–Ω–∞–∫ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ª—é–¥–µ–π –∑ –ª–∏—Ö–∏–º–∏ –Ω–∞–º—ñ—Ä–∞–º–∏ üò¢\n" \
              "–¢–æ–∂ –±—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ —Ç–∞ –æ–±–∞—á–Ω—ñ!"

        bot.send_message(message.chat.id,information,reply_markup= menu.main_menu())
    else:
        get_info(message)
bot.infinity_polling()